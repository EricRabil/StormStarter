/** Declaration file generated by dts-gen */

declare module "parcel" {
    export = parcel;
}

declare class parcel {
    constructor(entry: string, options?: {
        outDir: string,
        outFile: string,
        watch: boolean,
        cache: boolean,
        cacheDir: string,
        minify: boolean,
        target: string,
        https: boolean,
        logLevel: number,
        hmrPort: number,
        sourceMaps: boolean,
        hmrHostname: string,
        detailedReport: boolean
    });

    addAssetType(...args: any[]): void;

    addBundleLoader(...args: any[]): void;

    addPackager(...args: any[]): void;

    bundle(): Promise<void>;

    createBundleTree(...args: any[]): void;

    findOrphanAssets(...args: any[]): void;

    getAsset(...args: any[]): void;

    installDep(...args: any[]): void;

    loadAsset(...args: any[]): void;

    loadPlugins(...args: any[]): void;

    middleware(...args: any[]): void;

    moveAssetToBundle(...args: any[]): void;

    normalizeEntries(...args: any[]): void;

    normalizeOptions(...args: any[]): void;

    onChange(...args: any[]): void;

    processAsset(...args: any[]): void;

    resolveAsset(...args: any[]): void;

    resolveDep(...args: any[]): void;

    serve(...args: any[]): void;

    start(...args: any[]): void;

    stop(...args: any[]): void;

    throwDepError(...args: any[]): void;

    unloadAsset(...args: any[]): void;

    unloadOrphanedAssets(...args: any[]): void;

    unwatch(...args: any[]): void;

    watch(path: string, ...args: any[]): void;

    static defaultMaxListeners: number;

    static usingDomains: boolean;

}

declare module parcel {
    class Asset {
        constructor(...args: any[]);

        addDependency(...args: any[]): void;

        addURLDependency(...args: any[]): void;

        collectDependencies(...args: any[]): void;

        generate(...args: any[]): void;

        generateBundleName(...args: any[]): void;

        generateErrorMessage(...args: any[]): void;

        generateHash(...args: any[]): void;

        getConfig(...args: any[]): void;

        getDependencies(...args: any[]): void;

        invalidate(...args: any[]): void;

        invalidateBundle(...args: any[]): void;

        load(...args: any[]): void;

        loadIfNeeded(...args: any[]): void;

        mightHaveDependencies(...args: any[]): void;

        parse(...args: any[]): void;

        parseIfNeeded(...args: any[]): void;

        postProcess(...args: any[]): void;

        pretransform(...args: any[]): void;

        process(...args: any[]): void;

        replaceBundleNames(...args: any[]): void;

        shouldInvalidate(...args: any[]): void;

        transform(...args: any[]): void;

    }

    class EventEmitter {
        constructor();

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static defaultMaxListeners: number;

        static usingDomains: boolean;

    }

    class Packager {
        constructor(...args: any[]);

        addAsset(...args: any[]): void;

        end(...args: any[]): void;

        getSize(...args: any[]): void;

        setup(...args: any[]): void;

        start(...args: any[]): void;

        write(...args: any[]): void;

    }

    namespace Asset {
        namespace prototype {
            function addDependency(...args: any[]): void;

            function addURLDependency(...args: any[]): void;

            function collectDependencies(...args: any[]): void;

            function generate(...args: any[]): void;

            function generateBundleName(...args: any[]): void;

            function generateErrorMessage(...args: any[]): void;

            function generateHash(...args: any[]): void;

            function getConfig(...args: any[]): void;

            function getDependencies(...args: any[]): void;

            function invalidate(...args: any[]): void;

            function invalidateBundle(...args: any[]): void;

            function load(...args: any[]): void;

            function loadIfNeeded(...args: any[]): void;

            function mightHaveDependencies(...args: any[]): void;

            function parse(...args: any[]): void;

            function parseIfNeeded(...args: any[]): void;

            function postProcess(...args: any[]): void;

            function pretransform(...args: any[]): void;

            function process(...args: any[]): void;

            function replaceBundleNames(...args: any[]): void;

            function shouldInvalidate(...args: any[]): void;

            function transform(...args: any[]): void;

        }

    }

    namespace EventEmitter {
        namespace init {
            const prototype: {
            };

        }

        namespace listenerCount {
            const prototype: {
            };

        }

        namespace prototype {
            function addListener(type: any, listener: any): any;

            function emit(type: any, args: any): any;

            function eventNames(): any;

            function getMaxListeners(): any;

            function listenerCount(type: any): any;

            function listeners(type: any): any;

            function off(type: any, listener: any): any;

            function on(type: any, listener: any): any;

            function once(type: any, listener: any): any;

            function prependListener(type: any, listener: any): any;

            function prependOnceListener(type: any, listener: any): any;

            function rawListeners(type: any): any;

            function removeAllListeners(type: any, ...args: any[]): any;

            function removeListener(type: any, listener: any): any;

            function setMaxListeners(n: any): any;

            namespace addListener {
                const prototype: {
                };

            }

            namespace emit {
                const prototype: {
                };

            }

            namespace eventNames {
                const prototype: {
                };

            }

            namespace getMaxListeners {
                const prototype: {
                };

            }

            namespace listenerCount {
                const prototype: {
                };

            }

            namespace listeners {
                const prototype: {
                };

            }

            namespace off {
                const prototype: {
                };

            }

            namespace on {
                const prototype: {
                };

            }

            namespace once {
                const prototype: {
                };

            }

            namespace prependListener {
                const prototype: {
                };

            }

            namespace prependOnceListener {
                const prototype: {
                };

            }

            namespace rawListeners {
                const prototype: {
                };

            }

            namespace removeAllListeners {
                const prototype: {
                };

            }

            namespace removeListener {
                const prototype: {
                };

            }

            namespace setMaxListeners {
                const prototype: {
                };

            }

        }

    }

    namespace Packager {
        namespace prototype {
            function addAsset(...args: any[]): void;

            function end(...args: any[]): void;

            function getSize(...args: any[]): void;

            function setup(...args: any[]): void;

            function start(...args: any[]): void;

            function write(...args: any[]): void;

        }

    }

    namespace init {
        const prototype: {
        };

    }

    namespace listenerCount {
        const prototype: {
        };

    }

    namespace prototype {
        function addAssetType(...args: any[]): void;

        function addBundleLoader(...args: any[]): void;

        function addListener(type: any, listener: any): any;

        function addPackager(...args: any[]): void;

        function bundle(...args: any[]): void;

        function createBundleTree(...args: any[]): void;

        function emit(type: any, args: any): any;

        function eventNames(): any;

        function findOrphanAssets(...args: any[]): void;

        function getAsset(...args: any[]): void;

        function getMaxListeners(): any;

        function installDep(...args: any[]): void;

        function listenerCount(type: any): any;

        function listeners(type: any): any;

        function loadAsset(...args: any[]): void;

        function loadPlugins(...args: any[]): void;

        function middleware(...args: any[]): void;

        function moveAssetToBundle(...args: any[]): void;

        function normalizeEntries(...args: any[]): void;

        function normalizeOptions(...args: any[]): void;

        function off(type: any, listener: any): any;

        function on(type: any, listener: any): any;

        function onChange(...args: any[]): void;

        function once(type: any, listener: any): any;

        function prependListener(type: any, listener: any): any;

        function prependOnceListener(type: any, listener: any): any;

        function processAsset(...args: any[]): void;

        function rawListeners(type: any): any;

        function removeAllListeners(type: any, ...args: any[]): any;

        function removeListener(type: any, listener: any): any;

        function resolveAsset(...args: any[]): void;

        function resolveDep(...args: any[]): void;

        function serve(...args: any[]): void;

        function setMaxListeners(n: any): any;

        function start(...args: any[]): void;

        function stop(...args: any[]): void;

        function throwDepError(...args: any[]): void;

        function unloadAsset(...args: any[]): void;

        function unloadOrphanedAssets(...args: any[]): void;

        function unwatch(...args: any[]): void;

        function watch(...args: any[]): void;

        namespace addListener {
            const prototype: {
            };

        }

        namespace emit {
            const prototype: {
            };

        }

        namespace eventNames {
            const prototype: {
            };

        }

        namespace findOrphanAssets {
            namespace prototype {
                function next(p0: any): any;

            }

        }

        namespace getMaxListeners {
            const prototype: {
            };

        }

        namespace listenerCount {
            const prototype: {
            };

        }

        namespace listeners {
            const prototype: {
            };

        }

        namespace off {
            const prototype: {
            };

        }

        namespace on {
            const prototype: {
            };

        }

        namespace once {
            const prototype: {
            };

        }

        namespace prependListener {
            const prototype: {
            };

        }

        namespace prependOnceListener {
            const prototype: {
            };

        }

        namespace rawListeners {
            const prototype: {
            };

        }

        namespace removeAllListeners {
            const prototype: {
            };

        }

        namespace removeListener {
            const prototype: {
            };

        }

        namespace setMaxListeners {
            const prototype: {
            };

        }

    }

}

